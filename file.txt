#ifndef MAIN_H
#define MAIN_H
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <stdbool.h>
typedef struct student {
	char *name;
	char *gender;
	int age;
	struct student *next;
}Student;
int engine(void);
size_t print_list(Student *h);
void free_list(Student *head);
void prompt(char *name, int *age, char *gender);
int new_list(char *name, int age, char *gender, Student **head);
int list_push(char *name, int age, char *gender, Student **head);
int list_pop(char *name, int age, char *gender, Student **head);
int insert_n(char *name, int age, char *gender, Student **head, long unsigned int pos);
int del_begin(Student *head);
#endif
int main(void)
{
	bool iterate;
	char choice[1];
	
	iterate = true;
	printf("<---Welcome to DSA operations--->\n");
	while(iterate)
	{
		printf("PLease choose a Data Structure\n");
		printf("1. Singly Linked Lists\n");
		printf("2. Doubly Linked Lists\n");
		printf("3. Exit Program\n");
		scanf("%s", choice);
		if (strlen(choice) > 1)
		{
			printf("Error\n");
			continue;
		}
		if (strcmp(choice,"1") == 0)
		{
			engine();
		}
		else if (strcmp(choice,"2") == 0)
		{
			printf("Sorry, Doubly linked list is not yet released\n");
		}
		else if (strcmp(choice,"3") == 0)
		{
			printf("Exit\nGoodbye\n");
			exit(EXIT_SUCCESS);
		}
		else
		{
			printf("Inalid input, please try again\n");
		}
	}
	return (0);
}
int engine(void)
{
	bool iterate;
	size_t list_size;
	char name[20], gender[10];
	int age, operation;
	unsigned long int position;
	Student *head;
	char *input_script = "Choose operation\n1. Create new list"
	"\n2. Insert new node at the beginning"
	"\n3. Insert new node at position n"
	"\n4. Insert new node at the end"
	"\n5. Check all list items"
	"\n6. Quit program\n\n";

	iterate = true;
	head = NULL;
	while (iterate)
	{
		printf("%s", input_script);
		scanf("%d", &operation);
		switch (operation)
		{
			case 1:
				if (head == NULL)
				{
					prompt(name, &age, gender);
					new_list(name, age, gender, &head);
				}
				else
				{
					printf("<---Error--->\n List already exist\n<------>\n");
				}
				break;
			case 2:
				if (head != NULL)
				{
					prompt(name, &age, gender);
					list_push(name, age, gender, &head);
				}
				else
				{
					printf
					("<-Error->\n List does not exist\nPlease press 1 to create\n<--->\n");
				}
				break;
			case 3:
				printf("Enter Position: ");
				scanf("%ld", &position);
				if (head != NULL && position <= print_list(head))
				{
					prompt(name, &age, gender);
					insert_n(name, age, gender, &head, position);
				}
				else
				{
					printf("<-----Error------>\n");
				}
				break;
			case 4:
				if (head != NULL)
				{
					prompt(name, &age, gender);
					list_pop(name, age, gender, &head);
				}
				else
				{
					printf
					("<-Error->\n List does not exist\nPlease press 1 to create\n<--->\n");
				}
				break;
			case 5:
				if (head != NULL)
				{
					list_size = print_list(head);
					printf("-> %lu elements\n\n", list_size);
				}
				else
				{
					printf("\nEmpty List, Press 1 to create\n");
				}
				break;
			case 6:
				{
					free_list(head);
					printf("Exit\nGoodbye\n");
					return (0);
				}
			case 7:
				{
					del_begin(head);
				}
				break;		
		}
	}
}
int insert_n(char *name, int age, char *gender, Student **head,
unsigned long int pos)
{
	Student *temp;
	Student *prev_node;
	Student *new_node;
	unsigned long int position;

	new_node = (Student *) malloc(sizeof(Student));
	if (new_node == NULL)
	{
		printf("Error");
		return (1);
	}
	position = 1;
	temp = prev_node = *head;
	while (position < pos)
	{
		temp = temp->next;
	}
	new_node->name = strdup(name);
	new_node->age = age;
	new_node->gender = strdup(gender);
	new_node->next = temp->next;
	temp->next = new_node;
	printf("=======Success======\n");
	printf("Details------>\nName: %s\nAge: %d\nGender: %s\n",
	name, age, gender);
	sleep(2);
	return (0);
}
void free_list(Student *head)
{
	Student *temp;

	while (head != NULL)
	{
		temp = head;
		head = head->next;
		free(temp->name);
		free(temp->gender);
		free(temp);
	}
}
int list_push(char *name, int age, char *gender, Student **head)
{
	Student *new_node = (Student *) malloc(sizeof(Student));

	new_node->name = strdup(name);
	new_node->age = age;
	new_node->gender = strdup(gender);
	new_node->next = (*head);
	(*head) = new_node;
	printf("=======Success======\n");
	printf("Details------>\nName: %s\nAge: %d\nGender: %s\n",
	(*head)->name, (*head)->age, (*head)->gender);
	sleep(2);
	return (0);
}
int list_pop(char *name, int age, char *gender, Student **head)
{
	Student *temp = *head;
	Student *new_node = (Student *) malloc(sizeof(Student));

	if (new_node == NULL)
	{
		printf("Error\n");
		return (1);
	}
	while (temp->next)
	{
		temp = temp->next;
	}
	new_node->name = strdup(name);
	new_node->age = age;
	new_node->gender = strdup(gender);
	new_node->next = NULL;
	temp->next = new_node;
	printf("=======Success======\n");
	printf("Details------>\nName: %s\nAge: %d\nGender: %s\n",
	name, age, gender);
	sleep(2);
	return (0);
}
size_t print_list(Student *h)
{
	Student *temp;
	size_t i;

	temp = h;
	i = 1;
	while (temp->next != NULL)
	{
	printf("\nStudent %lu Data\nName: %s\nAge: %d\nGender: %s\n",
	i, temp->name, temp->age, temp->gender);
	i++;
	temp = temp->next;
	}
	printf("\nStudent %lu Data\nName: %s\nAge: %d\nGender: %s\n",
	i, temp->name, temp->age, temp->gender);
	return (i);

}
void prompt(char *name, int *age, char *gender)
{
	printf("Enter your name: ");
	scanf("%s", name);
	printf("Enter your age: ");
	scanf("%d", age);
	printf("Enter your gender: ");
	scanf("%s", gender);
}
int del_begin(Student *head)
{
	Student *temp;
	
	temp = head;
	free(head->name);
	free(head->gender);
	if (head->next == NULL)
	{
		head = NULL;
	}
	else
	{
		head = head->next;
	}
	free(temp);
	sleep(2);
	return (0);
}
int new_list(char *name, int age, char *gender, Student **head)
{
	Student *new_node = (Student *) malloc(sizeof(Student));

	if (new_node == NULL)
	{
		printf("Error\n");
		return (1);
	}
	new_node->name = strdup(name);
	new_node->age = age;
	new_node->gender = strdup(gender);
	new_node->next = NULL;
	(*head) = new_node;
	printf("=======Success======\n");
	printf("Details------>\nName: %s\nAge: %d\nGender: %s\n",
	name, age, gender);
	sleep(2);
	return (0);

}
